---
import type { ComponentProps, HTMLTag, Polymorphic } from 'astro/types'
import type { CollectionEntry } from 'astro:content'
import Badge from 'fulldev-ui/components/Badge.astro'
import Box from 'fulldev-ui/components/Box.astro'
import Button from 'fulldev-ui/components/Button.astro'
import Card from 'fulldev-ui/components/Card.astro'
import Column from 'fulldev-ui/components/Column.astro'
import Heading from 'fulldev-ui/components/Heading.astro'
import Image from 'fulldev-ui/components/Image.astro'
import List from 'fulldev-ui/components/List.astro'
import Rating from 'fulldev-ui/components/Rating.astro'
import Root from 'fulldev-ui/components/Root.astro'
import Text from 'fulldev-ui/components/Text.astro'
import Wrap from 'fulldev-ui/components/Wrap.astro'
import Tagline from './Tagline.astro'

type Props<As extends HTMLTag = 'section'> = Polymorphic<{ as: As }> & {
  position?: undefined | 'background' | 'cover' | 'inset'
  ratio?: undefined | 'landscape' | 'portrait' | 'square' | number
  mask?: undefined | 'sm' | 'md' | 'lg'
  buttons?: undefined | ComponentProps<typeof Button<'a'>>[]
  button?: undefined | ComponentProps<typeof Button<'a'>>
  cards?: undefined | ComponentProps<typeof Card<'a'>>[]
  badge?: undefined | string | ComponentProps<typeof Badge<'a'>>
  image?: undefined | ComponentProps<typeof Image>['src']
  rating?: undefined | number
  pages?: undefined | CollectionEntry<'pages'>['data'][]
  records?: undefined | CollectionEntry<'records'>['data'][]
  heading?: undefined | string
  title?: undefined | string
  text?: undefined | string
  html?: undefined | string
  description?: undefined | string
  label?: undefined | string
  tagline?: undefined | string
  list?: undefined | string[]
  theme?: undefined | 'light' | 'dark'
  color?: undefined | 'base' | 'brand'
  size?: undefined | 'sm' | 'md' | 'lg'
  frame?: undefined | 'none' | 'fill' | 'panel'
  align?: undefined | 'start' | 'center' | 'end'
  justify?: undefined | 'start' | 'center' | 'end'
  structure?:
    | undefined
    | 'column'
    | 'split'
    | 'spread'
    | 'carousel'
    | 'grid'
    | 'masonry'
    | 'stack'
  level?: undefined | 1 | 2 | 3 | 4 | 5 | 6
  space?: undefined | 'auto' | 'none'
  reverse?: undefined | 'odd' | 'even'
  variant?: undefined | 'primary' | 'secondary' | 'tertiary'
}

const {
  as = 'section',
  space = 'auto',
  frame = 'none',
  structure = 'column',
  variant = 'secondary',
  align = 'start',
  level = 2,
  position,
  label,
  heading,
  badge,
  title,
  text,
  list,
  html,
  tagline,
  description,
  buttons,
  image,
  rating,
  size,
  button,
  cards,
  pages,
  records,
  mask,
  justify,
  theme,
  ratio,
  ...rest
} = Astro.props

const mergedCards = (pages || records || cards)?.filter(Boolean)
const hasCards = mergedCards && mergedCards?.length > 0
const hasText = text || html || description || list
const hasButton = button || (buttons && buttons?.length > 0)

const buttonVariant = (i: number) => {
  if (variant === 'primary' && i === 0) return 'primary'
  else if (variant === 'primary' && i === 1) return 'secondary'
  else if (variant === 'primary' && i > 1) return 'tertiary'
  else if (variant === 'secondary' && i === 0) return 'secondary'
  else if (variant === 'secondary' && i > 0) return 'tertiary'
  else if (variant === 'tertiary') return 'tertiary'
  else return 'tertiary'
}
---

<Root
  class:list="section"
  variant={hasCards ? undefined : variant}
  justify={hasCards ? undefined : justify}
  theme={hasCards ? undefined : theme}
  structure={structure === 'split' ? 'split' : 'column'}
  frame={frame === 'panel' && hasCards ? 'none' : frame}
  {as}
  {align}
  {space}
  {size}
  {...rest}
>
  <Box
    structure={structure === 'spread' ||
    structure === 'carousel' ||
    (!hasText && hasButton)
      ? 'spread'
      : 'column'}
    align={structure === 'split' ? 'start' : align}
  >
    <slot name="segment">
      <Column
        style={{ textWrap: 'balance' }}
        align={structure === 'split' || structure === 'spread'
          ? 'start'
          : align}
      >
        <slot name="writeup">
          <Rating
            color="brand"
            {align}
            {...typeof rating === 'number' ? { value: rating } : rating}
          />
          <Badge
            color="base"
            radius="full"
            {...typeof badge === 'string' ? { html: badge } : badge}
          />
          <Tagline
            color="brand"
            html={tagline}
          />
          <Heading
            html={heading || title}
            {level}
          />
          <Text
            contrast={!hasCards && position === 'background' && true}
            html={html || text || description}
            lead={level === 1}
          />
          <List items={list} />
        </slot>
      </Column>
      <Wrap>
        <slot name="actions">
          {
            [button, ...(buttons ?? [])]
              .filter(Boolean)
              ?.map((button: any, i: number) => (
                <Button
                  variant={buttonVariant(i)}
                  {...button}
                />
              ))
          }
        </slot>
      </Wrap>
    </slot>
  </Box>
  <slot>
    <Box
      structure={structure === 'split' || structure === 'spread'
        ? 'column'
        : structure}
      position={structure === 'carousel' ? 'inset' : undefined}
      size={size === 'lg' ? 'md' : 'sm'}
    >
      <slot name="deck">
        {
          mergedCards?.map(({ ...rest }: any) => (
            <Card
              align="start"
              level={Number(level) + 2}
              {position}
              {frame}
              {justify}
              {theme}
              {variant}
              {ratio}
              {mask}
              {...rest}
            />
          ))
        }
      </slot>
    </Box>
    <Image
      position={hasCards ? undefined : position}
      ratio={hasCards ? undefined : ratio}
      mask={hasCards ? undefined : mask}
      src={image}
    />
  </slot>
</Root>

<style is:global lang="scss">
  @layer fulldev {
    .section {
      --inset-top: var(--space-7);
      --inset-left: var(--gutter-left);
      --inset-right: var(--gutter-right);
      --inset-bottom: var(--space-7);

      position: relative;

      &:first-child {
        --inset-top: var(--space-6);
        --inset-bottom: var(--space-6);
      }

      &.frame-none {
        padding: var(--inset-top) var(--inset-right) var(--inset-bottom)
          var(--inset-left);
      }

      &.frame-fill {
        background-color: var(--color-2);
        padding: var(--inset-top) var(--inset-right) var(--inset-bottom)
          var(--inset-left);
      }

      &.frame-panel {
        --inset-top: var(--space-6);
        --inset-left: min(var(--gutter), var(--space-7));
        --inset-right: min(var(--gutter), var(--space-7));
        --inset-bottom: var(--space-6);

        margin: var(--inset-top) var(--gutter-right) var(--inset-bottom)
          var(--gutter-left);
        border: 1px solid var(--base-a6);
        border-radius: var(--radius-2);
        background-color: var(--color-2);
        padding: var(--inset-top) var(--inset-right) var(--inset-bottom)
          var(--inset-left);
        max-width: calc(
          100vw - var(--sidebar-width) - var(--toc-width) - var(--gutter-left) - var(
              --gutter-right
            )
        );
        overflow: hidden;

        @media (min-width: 1024px) {
          --inset-top: var(--space-7);
          --inset-bottom: var(--space-7);
        }
      }

      &.frame-viewport {
        padding: var(--inset-top) var(--inset-right) var(--inset-bottom)
          var(--inset-left);
        min-height: 100vh;
      }

      @media (min-width: 1024px) {
        &:nth-of-type(odd).split.reverse-odd {
          > :first-child {
            order: 999;
          }

          > :last-child {
            order: 0;
          }
        }

        &:nth-of-type(even).split.reverse-even {
          > :first-child {
            order: 0;
          }

          > :last-child {
            order: 999;
          }
        }
      }
    }
  }
</style>
